# 준서가 최대한 즐거운 여행을 하기 위해 배낭에 넣을 수 있는 물건들의 가치의 최댓값은?
# 입력 첫째줄 -> 물품의 수 N, 준서가 버틸 수 있는 무게 K. 입력 둘째줄 ~ N -> 각 물건의 무게 W, 해당 물건의 가치 V
# 출력 첫째줄 -> 배낭에 넣을 수 있는 물건들의 가치 합의 최댓값

# 냅색(Knapsack) 알고리즘.
# 현재 배낭의 허용무게보다 넣을 물건의 무게가 더 크다면 넣지 않는다.
# 현재 넣을 물건의 무게만큼 배낭에서 빼고 현재 물건을 넣거나 현재물건을 넣지않고 이전 배낭 그대로 가지고 간다.
# j < weight : d[i][j] = d[i - 1][j] / d[i][j] = max(d[i - 1][j - weight] + value), d[i - 1][j])

n, k = map(int, input().split()) #입력받을 물품의 수, 준서가 버틸 수 있는 무게

thing = [[0, 0]] #각 물건의 무게, 가치 정렬
d = [[0] * (k + 1) for _ in range(n + 1)] #n+1개의 물건까지 볼때 무게가 k+1인 배낭의 최대 가치

for i in range(n):
    thing.append(list(map(int, input().split()))) #입력 받을 물건의 무게와 물건의 가치 정렬

for i in range(1, n + 1):
    for j in range(1, k + 1):
        w = thing[i][0] #무게
        v = thing[i][1] #가치

        if j < w: #현재 배낭의 허용 무게보다 넣을 물건의 무게가 더 크다면 넣지 않는다
            d[i][j] = d[i - 1][j]
        else: #현재 넣을 물건의 무게만큼 배낭에서 빼고 현재물건을 넣거나 현재 물건을 넣지않고 이전 배낭 그대로 가진다
            d[i][j] = max(d[i - 1][j], d[i - 1][j - w] + v)

print(d[n][k])