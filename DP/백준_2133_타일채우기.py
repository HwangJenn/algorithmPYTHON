# 3 x N 크기의 벽을 2 x 1, 1 x 2 크기의 타일로 채우는 경우의 수를 구하라
# 입력 첫째줄 -> N
# 출력 첫째줄 ->  경우의

# 벽의 가로길이가 홀수라면, 벽을 가득 채울 수 없다.
# 벽의 가로길이가 짝수라면, 벽을 가득 채울 수 있다.
# N이 2가 커질수록 2가지씩 늘어난다.
# 이를 고려한 점화식은 dp[n] = dp[n - 2] * 3 + 2 부터 n까지의 dp값에 x2

n = int(input()) #입력받을 가로길이 n

dp = [0] * (n + 1)

if n % 2 != 0: #2로 나누면 0 이 아니다 -> 홀수
    print(0) #홀수이면 벽을 가득채우지 못하기 때문
else:
    dp[2] = 3
    for i in range(4, n + 1, 2):
        dp[i] = dp[i - 2] * 3 + 2 #점화식
        for j in range(2, i - 2, 2):
            dp[i] += dp[j] * 2 #n이 2씩 커질수록 벽을 채울 수 있는 경우의 수가 2가지씩 늘어난다

    print(dp[n])