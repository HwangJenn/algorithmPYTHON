# 폴리오미노란 크기가 1*1 정사각형을 여러 개 이어서 붙인 도형.
# 조건: 정사각형은 서로 겹치면 안된다. 도형은 모두 연결되어 있어야 한다. 정사각형의 변끼리 연결되어 있어야 한다. 즉, 꼭짓점과 꼭짓점만 맞닿아 있으면 안된다.
# 정사각형 4개를 이어 붙인 폴리오미노는 테트로미노라고 한다.
# 아름이는 크기가 N x M인 종이 위에 테트로미노 하나를 놓으려고 한다. 종이는 1 x 1 크기의 칸으로 나누어져 있으며, 각각의 칸에는 정수가 하나 쓰여있다.
# 테트로미노 하나를 적절히 놓아서 테트로미노가 놓인 칸에 쓰여 있는 수들의 합을 최대로 하는 프로그램을 작성해라.
# 테트로미노는 반드시 한 정사각형이 정확히 하나의 칸을 포함하도록 놓아야 하며, 회전이나 대칭을 시켜도 된다.
# 입력 첫째줄 -> 종이의 세로크기 n, 가로크기 m , 입력 둘째줄 ~~ -> 종이에 쓰여 있는 수가 주어짐. i번째 줄의 j번째 수는 위에서 부터 i번째 칸, 왼쪽에서부터 j번째 칸에 쓰여 있는 수이다.
# 출력 첫째줄 -> 테트로미노가 놓인 칸에 쓰인 수들의 합의 최댓값

# 테트리스 모형을 모두 배열로 만들어서 비교한다.
# 첫 칸부터 끝칸까지 모든 칸에 대해 테트리스 모형을 대입해 최댓값을 비교해나가는 방식이다.

n, m = map(int, input().split()) #입력받을 지도 크기
board = [] #지도초기화
for i in range(n): #세로 크기만큼
    board.append(list(map(int, input().split()))) #지도에 입결된 수 추가

#테트로미노 모형 배열로 설정
tetris = [
    [(0, 0), (0, 1), (1, 0), (1, 1)], #ㅁ
    [(0, 0), (0, 1), (0, 2), (0, 3)], #ㅣ
    [(0, 0), (1, 0), (2, 0), (3, 0)], #ㅡ
    [(0, 0), (1, 0), (1, 1), (2, 1)], #ㅡ|--
    [(1, 0), (0, 1), (1, 1), (2, 0)], #--|ㅡ
    [(1, 0), (1, 1), (0, 1), (0, 2)], #h
    [(0, 0), (0, 1), (1, 1), (1, 2)], #h뒤집기
    [(0, 0), (1, 0), (2, 0), (2, 1)], #ㄴ뒤집기
    [(0, 1), (1, 1), (2, 0), (2, 1)], #ㄱ
    [(0, 0), (0, 1), (1, 0), (2, 0)], #ㄴ
    [(0, 0), (0, 1), (1, 1), (2, 1)], #ㄱ뒤집기
    [(1, 0), (0, 1), (1, 1), (1, 2)], #ㅓ
    [(0, 0), (0, 1), (0, 2), (1, 1)], #ㅏ
    [(0, 0), (1, 0), (1, 1), (1, 2)], #ㄴ뒤집기
    [(1, 0), (1, 1), (1, 2), (0, 2)], #ㄱ
    [(0, 0), (0, 1), (0, 2), (1, 0)], #ㄴ
    [(0, 0), (0, 1), (0, 2), (1, 2)], #ㄱ뒤집기
    [(0, 0), (1, 0), (1, 1), (2, 0)], #ㅗ
    [(1, 0), (0, 1), (1, 1), (2, 1)] #ㅜ
]

def solution(x, y):
    global answer
    for i in range(19): #테트리스모형이 19개임
        tmp = 0 #임시로 저장
        for j in range(4): #이동할 4방향
            nx = x + tetris[i][j][0] #입력받은줄에 모형 대입
            ny = y + tetris[i][j][1]

            if nx < 0 or nx >= n or ny < 0 or ny >= m: #배열 범위를 넘었는가
                break

            tmp += board[nx][ny] #지도의 방문점 임시로 저장

        answer = max(answer, tmp) #최댓값 비교

answer = 0 #answer초기화
for i in range(n): #세로범위안의 i
    for j in range(m):#가로범위안의 j
        solution(i, j) #입력받은 수 solution 함수로

print(answer)